1.NaN significa "Not-a-number", isso representa que o valor não é um número legal, esse valor também é retornado quando uma operação matemática do código não retorna um valor certo ou quando você soma números em que não existe um valor definido nos seus campos.

2.Você pode linkar um arquivo CSS ao código HTML ou, com a tag <style>, adicionar a configuração CSS no próprio código CSS, a diferença entre uma e outra é a organização, linkar um arquivo CSS ao HTML é muito mais prático e organizado do que adicionar a configuração no próprio HTML.

3.A div repesenta uma divisão em formato de conteiner, para agrupar elementos afim de estilizar a página (usando uma classe ou um id), já o span é um contêiner também com o propósito de estilizar a página porém ao contrário da div, o span é um elemento de nível de bloco enquanto o span é um elemento em linha.

4.Pode ser usado para providenciar informações gerais como idioma, título da página, links para css e scripts e folhas de estilos.

5.Listas ordenadas (<ol>) são normalmente usadas para criar uma série de passos ou definir uma lista (Como top melhores filmes de 2024) e listas não ordenadas servem para definir uma lista que a ordem não é necessariamente o foco da lista.

6.A propriedade display especifica o comportamento de exibição de um elemento.  
Block:exibe um elemento de bloco parecido com a tag <p>. Começa em uma linha nova e ocupa toda a largura.
inline: Mostra um elemento como um elemento em linha, parecido com o <span>. Qualquer propriedade de altura e largura não vai fazer efeito.
inline-block: Mostra um elemento como um container innline-level block container, O elemento em si é formatado como um elemento inline, mas você pode aplicar valores de altura e largura.

7.Content: O conteúdo da caixa, onde aparecem o texto e as imagens
Padding: Limpa uma área ao redor do conteúdo. O Preenchimento é transparente.
Border: Uma borda que circunda o preenchimento e o conteúdo
Margin: Limpa uma área fora da borda

8.Elementos como <header> ou <footer>, são considerados semânticos pois descrevem com precisão o propósito do elemento e o tipo de conteúdo dentro dele, esses elementos agrupam outros elementos juntos em uma seção dentro da página, com isso, facilita identificar que tipo de informação será incluída em cada tag semântica <header>.

9.Esse atributo serve para que quando clicamos em um link, seja aberta uma nova guia, devemos tomar cuidado ao utiliza-la pois pode ocorrer problemas de interface e confusão ao usuário quando utilizadas em sites.

10.A propriedade flex define o comprimento flexível em itens flexíveis.

11.As transições podem ser usadas para cria animações ao passar o mouse ou clicar em um elemento, um exemplo claro disso, é a animação do "pulinho" quando se passa o mouse em um elemento.

16. Declarações com var tem escopo global ou escopo de função/local, uma variável declarada com let em um bloco estará disponível apenas dentro daquele bloco, Variáveis declaradas com const mantêm valores constantes. Declarações com const compartilham algumas semelhanças com as declarações com let.

17.
1) x retorna ReferenceError

console.log(x) retorna 15

console.log(y) retorna 25

console.log(z) retorna 30

Dentro do primeiro bloco retorna os valores 100, 200 e 300

Fora do bloco retorna os valores respectivamente a = 100, typeof b = "undefined", typeof c = "undefined"

Antes do segundo bloco → 100, "undefined", "undefined"

Dentro do segundo bloco → "var da função", "let da função", "const da função"

Fora do segundo bloco → "string", "undefined", "undefined"

18.Java seria uma linguagem de programação de propósito generalista e JavaScript seria usada em aplicativos web para torná-los interativos e animados.

19."==" é a chamada igualdade "abstrata" ela compara valores e faz a conversão de tipo automática, já a "===" é a igualdade estrita, ela compara o valor e o tipo, se compararmos um número em formato de Number e outro em formato de String por exemplo (5==='5') ela retorna que essa afirmação é falsa.

20.Eles servem para condicionar expresões booleanas(expressões que envolvem true e false), são usados na maioria das vezes em if e outras estruturas de decisão, como verificar se uma pessoa é maior de idade ou não.

21.Sim. Usando a propriedade do "." para definir propriedades além da original, por exemplo:

let carro = {
  marca: "Honda",
  modelo: "Civic"
}

carro.ano = 2022
carro.cor = "Prata"

console.log(carro);

22.undefined significa que uma variável foi declarada, mas ainda não recebeu um valor e undefined significa que uma variável foi declarada, mas ainda não recebeu um valor.

23.Em JavaScript, um objeto é uma coleção de dados e funcionalidades relacionadas. Como como uma "gaveta" organizada onde você pode guardar diferentes tipos de informações, eles são declarados entre chaves que você define as propriedades e valores do objeto.
